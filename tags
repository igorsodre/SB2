!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD	constantes.hpp	6;"	d
ADD	testes/bin2.asm	/^ADD OLD_DATA+2$/;"	l
ADD	testes/bin2.asm.s	/^ADD AX, word[OLD_DATA+4]$/;"	l
BEGIN	constantes.hpp	/^const string BEGIN = "BEGIN";$/;"	v
BLU	constantes.hpp	68;"	d
CANT_CHANGE_CONST	constantes.hpp	50;"	d
CANT_JUMP_HERE	constantes.hpp	51;"	d
CMP	testes/bin.asm.s	/^CMP AX, 0$/;"	l
COISA	testes/bin.asm	/^COISA: EQU 1$/;"	d
COISA	testes/bin2.asm	/^COISA: EQU 50$/;"	d
COMAND_ON_WRONG_SECTION	constantes.hpp	47;"	d
CONST	constantes.hpp	/^const string CONST = "CONST";$/;"	v
CONSTANTES_HPP	constantes.hpp	4;"	d
COPY	constantes.hpp	14;"	d
COPY	testes/bin.asm	/^COPY NEW_DATA,OLD_DATA$/;"	l
COPY	testes/bin2.asm	/^COPY OLD_DATA,NEW_DATA$/;"	l
CYN	constantes.hpp	70;"	d
C_INPUT	constantes.hpp	20;"	d
C_OUTPUT	constantes.hpp	21;"	d
CellMem	montador.cpp	/^typedef shared_ptr<MemCell> CellMem;$/;"	t	file:
Config	montador.cpp	/^class Config {$/;"	c	file:
DATA_ON_WRONG_SECTION	constantes.hpp	46;"	d
DIV	constantes.hpp	9;"	d
DIV	testes/bin.asm.s	/^DIV word[DOIS]$/;"	l
DOIS	testes/bin.asm	/^DOIS: CONST 0X10$/;"	l
DOIS	testes/bin.asm.s	/^DOIS: dw 16$/;"	d
DOIS	testes/bin2.asm	/^DOIS: CONST 2$/;"	l
DOIS	testes/bin2.asm.s	/^DOIS: dw 10$/;"	d
END	constantes.hpp	/^const string END = "END";$/;"	v
EQU	constantes.hpp	/^const string EQU = "EQU";$/;"	v
ERRO_LEXICO	constantes.hpp	55;"	d
ERRO_SEMANTICO	constantes.hpp	36;"	d
ERRO_SINTATICO	constantes.hpp	30;"	d
EXCEEDED_BEGIN_NUM	constantes.hpp	39;"	d
EXCEEDED_END_NUM	constantes.hpp	40;"	d
EXCEEDED_SECTION_DATA	constantes.hpp	44;"	d
EXCEEDED_SECTION_TEXT	constantes.hpp	43;"	d
EXTERN	constantes.hpp	/^const string EXTERN = "EXTERN";$/;"	v
EquMap	preprocessador.cpp	/^typedef map<string,int> EquMap;$/;"	t	file:
FLAG_O	constantes.hpp	/^const string FLAG_O = "-o";$/;"	v
FLAG_P	constantes.hpp	/^const string FLAG_P = "-p";$/;"	v
FTable	montador.cpp	/^		map<int, int(*)(Config&,vector<string>&,fstream&)> FTable;$/;"	m	class:Config	file:
GET_COD_LINE	constantes.hpp	78;"	d
GET_NEXT_ACTION	constantes.hpp	79;"	d
GET_TABLE_DEFINITION_LINE	constantes.hpp	76;"	d
GET_TABLE_REALOC_LINE	constantes.hpp	77;"	d
GET_USE_TABLE_LINE	constantes.hpp	75;"	d
GRN	constantes.hpp	66;"	d
HELPER_CPP	helper.cpp	14;"	d	file:
H_INPUT	constantes.hpp	22;"	d
H_OUTPUT	constantes.hpp	23;"	d
IF	constantes.hpp	/^const string IF = "IF";$/;"	v
INPUT	constantes.hpp	17;"	d
INPUT	testes/bin.asm	/^INPUT OLD_DATA$/;"	l
INSTRUCTION_NOT_FOUND	constantes.hpp	32;"	d
INT	testes/bin.asm.s	/^INT 80h$/;"	l
INT	testes/bin2.asm.s	/^INT 80h$/;"	l
INVALID_ADDRESS	constantes.hpp	49;"	d
JG	testes/bin.asm.s	/^JG L1$/;"	l
JMP	constantes.hpp	10;"	d
JMPN	constantes.hpp	11;"	d
JMPP	constantes.hpp	12;"	d
JMPP	testes/bin.asm	/^JMPP L1$/;"	l
JMPZ	constantes.hpp	13;"	d
L1	testes/bin.asm	/^L1: DIV DOIS$/;"	l
L1	testes/bin.asm.s	/^L1:$/;"	l
L1	testes/bin2.asm	/^L1: SUB TMP_DATA$/;"	l
L1	testes/bin2.asm.s	/^L1:$/;"	l
LOAD	constantes.hpp	15;"	d
LOAD	testes/bin.asm	/^LOAD OLD_DATA$/;"	l
LOAD	testes/bin2.asm	/^LOAD DOIS$/;"	l
MAG	constantes.hpp	69;"	d
MISSING_END	constantes.hpp	41;"	d
MISSING_SECTION_TEXT	constantes.hpp	42;"	d
MISSING_SIMBOL	constantes.hpp	45;"	d
MISSING_STOP	constantes.hpp	52;"	d
MONTA	constantes.hpp	83;"	d
MONTADOR_CPP	montador.cpp	12;"	d	file:
MOV	testes/bin.asm.s	/^MOV AX, word[OLD_DATA]$/;"	l
MOV	testes/bin.asm.s	/^MOV EAX, 1$/;"	l
MOV	testes/bin.asm.s	/^MOV EBX, 0$/;"	l
MOV	testes/bin.asm.s	/^MOV word[NEW_DATA], AX$/;"	l
MOV	testes/bin.asm.s	/^MOV word[OLD_DATA+0], word[NEW_DATA+0]$/;"	l
MOV	testes/bin.asm.s	/^MOV word[TMP_DATA], AX$/;"	l
MOV	testes/bin2.asm.s	/^MOV AX, word[DOIS]$/;"	l
MOV	testes/bin2.asm.s	/^MOV EAX, 1$/;"	l
MOV	testes/bin2.asm.s	/^MOV EBX, 0$/;"	l
MOV	testes/bin2.asm.s	/^MOV word[NEW_DATA+0], word[OLD_DATA+0]$/;"	l
MUL	testes/bin.asm.s	/^MUL word[DOIS]$/;"	l
MULT	constantes.hpp	8;"	d
MULT	testes/bin.asm	/^MULT DOIS$/;"	l
MemCell	montador.cpp	/^		MemCell(int val, int relativo = 0){$/;"	f	class:MemCell
MemCell	montador.cpp	/^class MemCell {$/;"	c	file:
NEW_DATA	testes/bin.asm	/^NEW_DATA: SPACE COISA$/;"	l
NEW_DATA	testes/bin.asm.s	/^NEW_DATA: resw 1$/;"	l
NEW_DATA	testes/bin2.asm	/^NEW_DATA: SPACE COISA$/;"	l
NEW_DATA	testes/bin2.asm.s	/^NEW_DATA: resdw 50$/;"	l
OLD_DATA	testes/bin.asm	/^OLD_DATA: SPACE COISA$/;"	l
OLD_DATA	testes/bin.asm.s	/^OLD_DATA: resw 1$/;"	l
OLD_DATA	testes/bin2.asm	/^OLD_DATA: SPACE COISA$/;"	l
OLD_DATA	testes/bin2.asm.s	/^OLD_DATA: resdw 50$/;"	l
OUTPUT	constantes.hpp	18;"	d
OUTPUT	testes/bin.asm	/^OUTPUT TMP_DATA$/;"	l
Operand	montador.cpp	/^class Operand {$/;"	c	file:
PREPROCESSA	constantes.hpp	82;"	d
PREPROCESSA_CPP	preprocessador.cpp	10;"	d	file:
PUBLIC	constantes.hpp	/^const string PUBLIC = "PUBLIC";$/;"	v
RED	constantes.hpp	65;"	d
RESET	constantes.hpp	72;"	d
SECTION	testes/bin.asm	/^SECTION DATA$/;"	l
SECTION	testes/bin.asm	/^SECTION TEXT$/;"	l
SECTION	testes/bin2.asm	/^SECTION DATA$/;"	l
SECTION	testes/bin2.asm	/^SECTION TEXT$/;"	l
SECTIONS_IN_WRONG_ORDER	constantes.hpp	38;"	d
SECTION_DATA	constantes.hpp	/^const string SECTION_DATA = "SECTION DATA";$/;"	v
SECTION_TEXT	constantes.hpp	/^const string SECTION_TEXT = "SECTION TEXT";$/;"	v
SEMANTIC_ERROR	constantes.hpp	/^const string SEMANTIC_ERROR = "Semantic error: ";$/;"	v
SPACE	constantes.hpp	/^const string SPACE = "SPACE";$/;"	v
SPACE_ARGUMENT_NOT_POSITIVE	constantes.hpp	48;"	d
STOP	constantes.hpp	19;"	d
STOP	testes/bin.asm	/^STOP$/;"	l
STOP	testes/bin2.asm	/^STOP$/;"	l
STORE	constantes.hpp	16;"	d
STORE	testes/bin.asm	/^STORE  NEW_DATA$/;"	l
STORE	testes/bin.asm	/^STORE TMP_DATA$/;"	l
SUB	constantes.hpp	7;"	d
SUB	testes/bin.asm	/^SUB TMP_DATA$/;"	l
SUB	testes/bin.asm.s	/^SUB AX, word[TMP_DATA]$/;"	l
SUB	testes/bin2.asm.s	/^SUB AX, word[TMP_DATA]$/;"	l
SYNTAX_ERROR	constantes.hpp	/^const string SYNTAX_ERROR = "Syntax error: ";$/;"	v
S_INPUT	constantes.hpp	24;"	d
S_OUTPUT	constantes.hpp	25;"	d
SimbolTable	montador.cpp	/^typedef map<string, shared_ptr<Ts>> SimbolTable;$/;"	t	file:
TMP_DATA	testes/bin.asm	/^TMP_DATA: SPACE$/;"	l
TMP_DATA	testes/bin.asm.s	/^TMP_DATA: resw 1$/;"	l
TMP_DATA	testes/bin2.asm	/^TMP_DATA: SPACE$/;"	l
TMP_DATA	testes/bin2.asm.s	/^TMP_DATA: resdw 1$/;"	l
TOKEN_ALREADY_EXISTS	constantes.hpp	37;"	d
TOKEN_TYPE_1	constantes.hpp	60;"	d
TOKEN_TYPE_2	constantes.hpp	61;"	d
TOKEN_TYPE_3	constantes.hpp	62;"	d
TOKEN_TYPE_4	constantes.hpp	63;"	d
Ts	montador.cpp	/^		Ts(int val, int outside = 0){$/;"	f	class:Ts
Ts	montador.cpp	/^class Ts{$/;"	c	file:
WHT	constantes.hpp	71;"	d
WRONG_ARG_NUM	constantes.hpp	31;"	d
WRONG_ARG_TYPE	constantes.hpp	33;"	d
WRONG_TOKEN_FORMAT	constantes.hpp	56;"	d
YEL	constantes.hpp	67;"	d
_start	testes/bin.asm.s	/^_start:$/;"	l
_start	testes/bin2.asm.s	/^_start:$/;"	l
adiciona_label	montador.cpp	/^void adiciona_label(SimbolTable &simbol_table, string simbol, int posicao){$/;"	f
check_EQU	preprocessador.cpp	/^int check_EQU(string line, map<string, int> &equ_map){$/;"	f
check_IF	preprocessador.cpp	/^int check_IF(string line, fstream &fonte, fstream &saida, map<string, int> &equ_map){$/;"	f
check_can_jump	montador.cpp	/^int check_can_jump(Config &c, Operand arg_1){$/;"	f
check_const	montador.cpp	/^int check_const(Config &c, Operand &a1){$/;"	f
check_operandos	montador.cpp	/^int check_operandos(Config &c, vector<string> &tokens, int line_has_label){$/;"	f
check_section_data	montador.cpp	/^int check_section_data(string &s, int &counter){$/;"	f
check_section_text	montador.cpp	/^int check_section_text(string &s, int &counter){$/;"	f
check_sections_order	montador.cpp	/^int check_sections_order(Config &c){$/;"	f
check_space	montador.cpp	/^int check_space(Config &c, Operand &a1){$/;"	f
check_valid_line	montador.cpp	/^int check_valid_line(Config &c){$/;"	f
check_validade_tokens	montador.cpp	/^int check_validade_tokens(vector<string> &tokens){$/;"	f
cmp	testes/lerint.s	/^cmp byte[buff], 45$/;"	l
const_val	montador.cpp	/^		int const_val;$/;"	m	class:Ts	file:
count_line	montador.cpp	/^		int count_line = 1;$/;"	m	class:Config	file:
count_pos	montador.cpp	/^		int count_pos = 0;$/;"	m	class:Config	file:
definition_table	montador.cpp	/^		map<string, int> definition_table;$/;"	m	class:Config	file:
eax	testes/lerint.s	/^eax -= 30$/;"	l
ebx	testes/lerint.s	/^ebx = ebx + esi$/;"	d
ebx	testes/lerint.s	/^ebx = ebx << 3$/;"	d
ecx	testes/lerint.s	/^ecx = 1$/;"	d
eh_diretiva	montador.cpp	/^int eh_diretiva(string &s){$/;"	f
eh_label	helper.cpp	/^int eh_label(string &str){$/;"	f
eh_modulo	montador.cpp	/^		int eh_modulo = 0;$/;"	m	class:Config	file:
end_read_int	testes/lerint.s	/^end_read_int:$/;"	l
enquanto	testes/lerint.s	/^enquanto ecx != 9$/;"	l
enter	testes/lerint.s	/^enter 0,0$/;"	l
err_subtype	montador.cpp	/^		int err_subtype;$/;"	m	class:Config	file:
err_type	montador.cpp	/^		int err_type;$/;"	m	class:Config	file:
esi	testes/lerint.s	/^esi = ebx << 1$/;"	d
exec	main.cpp	/^void exec(int argc, char *argv[]){$/;"	f
exec_diretiva	montador.cpp	/^int exec_diretiva(string &diretiva, vector<string> &argumentos, Config &c, int count_pos, int count_line){$/;"	f
executa_instrucao	montador.cpp	/^int executa_instrucao(Config &c){$/;"	f
existe_label	montador.cpp	/^int existe_label(SimbolTable &simbol_table, string token){$/;"	f
f_add	montador.cpp	/^int f_add(Config &c, vector<string> &v, fstream &f_out){$/;"	f
f_cinput	montador.cpp	/^int f_cinput(Config &c, vector<string> &v, fstream &f_out){ return 1;}$/;"	f
f_copy	montador.cpp	/^int f_copy(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_coutput	montador.cpp	/^int f_coutput(Config &c, vector<string> &v, fstream &f_out){ return 1;}$/;"	f
f_div	montador.cpp	/^int f_div(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_hinput	montador.cpp	/^int f_hinput(Config &c, vector<string> &v, fstream &f_out){ return 1;}$/;"	f
f_houtput	montador.cpp	/^int f_houtput(Config &c, vector<string> &v, fstream &f_out){ return 1;}$/;"	f
f_input	montador.cpp	/^int f_input(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_jmp	montador.cpp	/^int f_jmp(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_jmpn	montador.cpp	/^int f_jmpn(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_jmpp	montador.cpp	/^int f_jmpp(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_jmpz	montador.cpp	/^int f_jmpz(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_load	montador.cpp	/^int f_load(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_mult	montador.cpp	/^int f_mult(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_output	montador.cpp	/^int f_output(Config &c, vector<string> &v, fstream &f_out){ return 1;}$/;"	f
f_sinput	montador.cpp	/^int f_sinput(Config &c, vector<string> &v, fstream &f_out){ return 1;}$/;"	f
f_soutput	montador.cpp	/^int f_soutput(Config &c, vector<string> &v, fstream &f_out){ return 1;}$/;"	f
f_stop	montador.cpp	/^int f_stop(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_store	montador.cpp	/^int f_store(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
f_sub	montador.cpp	/^int f_sub(Config &c, vector<string> &v, fstream &f_out){ $/;"	f
filtra_comentario	preprocessador.cpp	/^string filtra_comentario(string line){$/;"	f
get_address	montador.cpp	/^int get_address(Config &c, Operand &op){$/;"	f
get_estencao	main.cpp	/^string get_estencao(string s){$/;"	f
get_instruction	montador.cpp	/^int get_instruction(map<string, int> &t, string s){$/;"	f
get_operand_p	preprocessador.cpp	/^int get_operand_p(string s, vector<string> &v, EquMap &em){$/;"	f
get_operando	montador.cpp	/^int get_operando(string str, Operand &op){$/;"	f
global	testes/bin.asm.s	/^global _start $/;"	l
global	testes/bin2.asm.s	/^global _start $/;"	l
in_array	helper.cpp	/^bool in_array(const std::string &value, const std::vector<string> &array)$/;"	f
inicializa_arquivo	main.cpp	/^int inicializa_arquivo(char *argv[], fstream &fonte){$/;"	f
inicializa_tabela_instrucao	montador.cpp	/^void inicializa_tabela_instrucao(Config &c){$/;"	f
inicializa_tabela_tamanhos_instrucao	montador.cpp	/^void inicializa_tabela_tamanhos_instrucao(map<int,int> &t){$/;"	f
inst_size_table	montador.cpp	/^		map<int, int> inst_size_table;$/;"	m	class:Config	file:
instruction_table	montador.cpp	/^		map<string, int> instruction_table;$/;"	m	class:Config	file:
int	testes/lerint.s	/^int 80h$/;"	l
is_hex_string	helper.cpp	/^bool is_hex_string(std::string& s) {$/;"	f
is_number	helper.cpp	/^bool is_number(const std::string& s)$/;"	f
jne	testes/lerint.s	/^jne read_int_loop$/;"	l
join	helper.cpp	/^string join(const vector<string>& vec, const char* delim)$/;"	f
label	montador.cpp	/^		string label;$/;"	m	class:Operand	file:
last_label	montador.cpp	/^		string last_label;$/;"	m	class:Config	file:
leave	testes/lerint.s	/^leave$/;"	l
ler	testes/lerint.s	/^ler 1 caracter, se sinal de negativo edx = 1$/;"	l
lerinteiro	testes/lerint.s	/^lerinteiro:$/;"	l
line	montador.cpp	/^		string line;$/;"	m	class:Config	file:
lines_with_errors	montador.cpp	/^		vector<int> lines_with_errors;$/;"	m	class:Config	file:
log_error	montador.cpp	/^void log_error(Config &c){$/;"	f
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
memory	montador.cpp	/^		map<int, CellMem> memory;$/;"	m	class:Config	file:
monta_arquivo	montador.cpp	/^int monta_arquivo(fstream &fonte, string filename){$/;"	f
montagem	main.cpp	/^int montagem(fstream &fonte, fstream &saida_pre, char *argv[]){$/;"	f
mov	testes/lerint.s	/^mov eax, 3$/;"	l
mov	testes/lerint.s	/^mov ebx, 0$/;"	l
mov	testes/lerint.s	/^mov ecx, 0$/;"	l
mov	testes/lerint.s	/^mov ecx, buff$/;"	l
mov	testes/lerint.s	/^mov edx, 7$/;"	l
num_ends	montador.cpp	/^		int num_ends = 0;$/;"	m	class:Config	file:
num_errors	montador.cpp	/^		int num_errors = 0;$/;"	m	class:Config	file:
offset	montador.cpp	/^		int offset = 0;$/;"	m	class:Operand	file:
operacao	montador.cpp	/^		string operacao;$/;"	m	class:Config	file:
outside	montador.cpp	/^		int outside;$/;"	m	class:Ts	file:
pega	testes/lerint.s	/^pega um caracter$/;"	l
pop	testes/lerint.s	/^pop ebx$/;"	l
pop	testes/lerint.s	/^pop ecx$/;"	l
pop	testes/lerint.s	/^pop edx$/;"	l
preprocessa_arquivo	preprocessador.cpp	/^int preprocessa_arquivo(fstream &fonte, fstream &saida_pre, char *argv[]){$/;"	f
primeira_passagem	montador.cpp	/^int primeira_passagem(fstream &fonte, Config &c){$/;"	f
proceed	preprocessador.cpp	/^void proceed(string &line, fstream &saida, EquMap &em){$/;"	f
push	testes/lerint.s	/^push ebx$/;"	l
push	testes/lerint.s	/^push ecx$/;"	l
push	testes/lerint.s	/^push edx$/;"	l
read_int_loop	testes/lerint.s	/^read_int_loop:$/;"	l
reduce	helper.cpp	/^std::string reduce(const std::string& str,$/;"	f
relativo	montador.cpp	/^		int relativo = 0;$/;"	m	class:MemCell	file:
ret	testes/lerint.s	/^ret$/;"	l
run_diretiva	montador.cpp	/^int run_diretiva(Config &c){$/;"	f
se	testes/lerint.s	/^se caracter == enter pula pro final do codigo$/;"	l
se	testes/lerint.s	/^se nao ebx = caracter - 30$/;"	l
se	testes/lerint.s	/^se nao$/;"	l
se_const	montador.cpp	/^		int se_const = 0;$/;"	m	class:Ts	file:
se_tem_label	montador.cpp	/^		int se_tem_label = 0;$/;"	m	class:Config	file:
se_tem_stop	montador.cpp	/^		int se_tem_stop = 0;$/;"	m	class:Config	file:
section	testes/bin.asm.s	/^section .bss$/;"	l
section	testes/bin.asm.s	/^section .data$/;"	l
section	testes/bin.asm.s	/^section .text $/;"	l
section	testes/bin2.asm.s	/^section .bss$/;"	l
section	testes/bin2.asm.s	/^section .data$/;"	l
section	testes/bin2.asm.s	/^section .text $/;"	l
section	testes/lerint.s	/^section .data$/;"	l
section	testes/lerint.s	/^section .text$/;"	l
section_data_count	montador.cpp	/^		int section_data_count = 0;$/;"	m	class:Config	file:
section_text_count	montador.cpp	/^		int section_text_count = 0;$/;"	m	class:Config	file:
sections_data	montador.cpp	/^int sections_data(Config &c, string filename, fstream &f){$/;"	f
set_definitions	montador.cpp	/^int set_definitions(Config &c){$/;"	f
set_extern	montador.cpp	/^int set_extern(string label, SimbolTable &simbol_table){$/;"	f
set_public	montador.cpp	/^int set_public(string label, Config &c){$/;"	f
simbol_table	montador.cpp	/^		SimbolTable simbol_table;$/;"	m	class:Config	file:
space_size	montador.cpp	/^		int space_size = 0;$/;"	m	class:Ts	file:
split	helper.cpp	/^void split(const string &s, const char* delim, vector<string> & v){$/;"	f
to_uppercase	helper.cpp	/^void to_uppercase(string &str){$/;"	f
translate_text	montador.cpp	/^int translate_text(Config &c, fstream &fonte, fstream &f_out){$/;"	f
trim	helper.cpp	/^std::string trim(const std::string& str,$/;"	f
use_table	montador.cpp	/^		map<string, vector<int>> use_table;$/;"	m	class:Config	file:
val	montador.cpp	/^		int val;$/;"	m	class:MemCell	file:
val	montador.cpp	/^		int val;$/;"	m	class:Ts	file:
validate_copy	montador.cpp	/^int validate_copy(string str, Config &c){$/;"	f
validate_token	montador.cpp	/^int validate_token(string s, int option){$/;"	f
verifica_argumentos	main.cpp	/^int verifica_argumentos(int argc, char *argv[]){$/;"	f
verifica_extensao	main.cpp	/^int verifica_extensao(string &s){$/;"	f
