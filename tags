!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD	constantes.hpp	6;"	d
ADD	testes/teste5.asm	/^ADD val,n+3 ; mais de um arg$/;"	l
ADD	testes/teste6.asm	/^ADD OLD$/;"	l
AUX	arquivos_teste_moodle/fat_mod_B.asm	/^	AUX: SPACE$/;"	l
B	arquivos_teste_moodle/triangulo.asm	/^B:		SPACE$/;"	l
B	testes/teste1.asm	/^B: Space$/;"	l
BEGIN	constantes.hpp	/^const string BEGIN = "BEGIN";$/;"	v
BLU	constantes.hpp	60;"	d
CANT_CHANGE_CONST	constantes.hpp	44;"	d
COMAND_ON_WRONG_SECTION	constantes.hpp	41;"	d
CONST	constantes.hpp	/^const string CONST = "CONST";$/;"	v
CONSTANTES_HPP	constantes.hpp	4;"	d
COPY	arquivos_teste_moodle/bin.asm	/^COPY DOIS,OLD_DATA ;out$/;"	l
COPY	arquivos_teste_moodle/bin.asm	/^COPY NEW_DATA,OLD_DATA$/;"	l
COPY	constantes.hpp	14;"	d
COPY	testes/teste6.asm	/^COPY NEW$/;"	l
COPY	testes/teste6.asm	/^COPY OLDOLDER$/;"	l
COPY	testes/teste6.asm	/^COPY ONE, OLD$/;"	l
COPY	testes/teste6.asm	/^COPY ZERO, OLDER$/;"	l
CYN	constantes.hpp	62;"	d
CellMem	montador.cpp	/^typedef shared_ptr<MemCell> CellMem;$/;"	t	file:
ConfLig	ligador.cpp	/^class ConfLig {$/;"	c	file:
Config	montador.cpp	/^class Config {$/;"	c	file:
DATA_ON_WRONG_SECTION	constantes.hpp	40;"	d
DIV	arquivos_teste_moodle/triangulo.asm	/^DIV		DOIS$/;"	l
DIV	constantes.hpp	9;"	d
DOIS	arquivos_teste_moodle/bin.asm	/^DOIS: CONST 2$/;"	l
DOIS	arquivos_teste_moodle/triangulo.asm	/^DOIS:	CONST		2$/;"	l
Div	testes/teste1.asm	/^Div 2ois$/;"	l
END	constantes.hpp	/^const string END = "END";$/;"	v
EQU	constantes.hpp	/^const string EQU = "EQU";$/;"	v
ERRO_LEXICO	constantes.hpp	47;"	d
ERRO_SEMANTICO	constantes.hpp	30;"	d
ERRO_SINTATICO	constantes.hpp	24;"	d
EXCEEDED_BEGIN_NUM	constantes.hpp	33;"	d
EXCEEDED_END_NUM	constantes.hpp	34;"	d
EXCEEDED_SECTION_DATA	constantes.hpp	38;"	d
EXCEEDED_SECTION_TEXT	constantes.hpp	37;"	d
EXTERN	constantes.hpp	/^const string EXTERN = "EXTERN";$/;"	v
FAT	arquivos_teste_moodle/fat_mod_A.asm	/^	FAT: SUB ONE$/;"	l
FAT	arquivos_teste_moodle/fat_mod_B.asm	/^	FAT: EXTERN$/;"	l
FIM	arquivos_teste_moodle/fat_mod_A.asm	/^	FIM: OUTPUT N$/;"	l
FINAL	testes/teste6.asm	/^FINAL: OUTPUT LIMIT$/;"	l
FLAG_O	constantes.hpp	/^const string FLAG_O = "-o";$/;"	v
FLAG_P	constantes.hpp	/^const string FLAG_P = "-p";$/;"	v
GET_COD_LINE	constantes.hpp	70;"	d
GET_NEXT_ACTION	constantes.hpp	71;"	d
GET_TABLE_DEFINITION_LINE	constantes.hpp	68;"	d
GET_TABLE_REALOC_LINE	constantes.hpp	69;"	d
GET_USE_TABLE_LINE	constantes.hpp	67;"	d
GRN	constantes.hpp	58;"	d
H	arquivos_teste_moodle/triangulo.asm	/^H:		SPACE$/;"	l
H	testes/teste1.asm	/^H: Space$/;"	l
HELPER_CPP	helper.cpp	12;"	d	file:
IF	arquivos_teste_moodle/triangulo.asm	/^IF TRIANGULO$/;"	l
IF	constantes.hpp	/^const string IF = "IF";$/;"	v
IF	testes/teste5.asm	/^IF L1$/;"	l
IF	testes/teste5.asm	/^IF L2$/;"	l
INPUT	arquivos_teste_moodle/bin.asm	/^INPUT OLD_DATA$/;"	l
INPUT	arquivos_teste_moodle/triangulo.asm	/^INPUT		B$/;"	l
INPUT	arquivos_teste_moodle/triangulo.asm	/^INPUT		H$/;"	l
INPUT	constantes.hpp	17;"	d
INPUT	testes/teste2.asm	/^INPUT        N$/;"	l
INPUT	testes/teste6.asm	/^INPUT LIMIT$/;"	l
INPUt	testes/teste3.asm	/^INPUt #$/;"	l
INSTRUCTION_NOT_FOUND	constantes.hpp	26;"	d
INUPT	testes/teste1.asm	/^INUPT H$/;"	l
INVALID_ADDRESS	constantes.hpp	43;"	d
JMP	constantes.hpp	10;"	d
JMP	testes/teste5.asm	/^JMP Var$/;"	l
JMP	testes/teste6.asm	/^JMP FRONT$/;"	l
JMPN	constantes.hpp	11;"	d
JMPP	arquivos_teste_moodle/bin.asm	/^JMPP L1$/;"	l
JMPP	constantes.hpp	12;"	d
JMPP	testes/teste6.asm	/^JMPP FINAL$/;"	l
JMPZ	constantes.hpp	13;"	d
L1	arquivos_teste_moodle/bin.asm	/^L1: DIV DOIS$/;"	l
L1	testes/teste2.asm	/^L1: EQU 1$/;"	d
L2	testes/teste2.asm	/^L2: EQU 0$/;"	d
L2	testes/teste5.asm	/^L2: EQU 0$/;"	d
L3	testes/teste5.asm	/^L3: EQUAL 1$/;"	l
LIGADOR_CPP	ligador.cpp	13;"	d	file:
LIMIT	testes/teste6.asm	/^LIMIT: SPACE$/;"	l
LOAD	arquivos_teste_moodle/bin.asm	/^LOAD OLD_DATA$/;"	l
LOAD	arquivos_teste_moodle/triangulo.asm	/^LOAD		B$/;"	l
LOAD	constantes.hpp	15;"	d
LOAD	testes/teste2.asm	/^LOAD         N$/;"	l
LOAD	testes/teste5.asm	/^LOAD N$/;"	l
LOAD	testes/teste5.asm	/^LOAD N+2$/;"	l
LoaD	testes/teste3.asm	/^LoaD #$/;"	l
Load	testes/teste1.asm	/^Load B$/;"	l
MAG	constantes.hpp	61;"	d
MISSING_END	constantes.hpp	35;"	d
MISSING_SECTION_TEXT	constantes.hpp	36;"	d
MISSING_SIMBOL	constantes.hpp	39;"	d
MOD_A	arquivos_teste_moodle/fat_mod_A.asm	/^MOD_A: BEGIN$/;"	l
MOD_B	arquivos_teste_moodle/fat_mod_A.asm	/^	MOD_B: EXTERN$/;"	l
MOD_B	arquivos_teste_moodle/fat_mod_B.asm	/^MOD_B: BEGIN$/;"	l
MONTA	constantes.hpp	75;"	d
MONTADOR_CPP	montador.cpp	12;"	d	file:
MULT	arquivos_teste_moodle/bin.asm	/^MULT DOIS$/;"	l
MULT	arquivos_teste_moodle/triangulo.asm	/^MULT		H$/;"	l
MULT	constantes.hpp	8;"	d
MemCell	montador.cpp	/^		MemCell(int val, int relativo = 0){$/;"	f	class:MemCell
MemCell	montador.cpp	/^class MemCell {$/;"	c	file:
Module	ligador.cpp	/^		Module(){}$/;"	f	class:Module
Module	ligador.cpp	/^class Module{$/;"	c	file:
Mul	testes/teste1.asm	/^Mul K$/;"	l
N	arquivos_teste_moodle/fat_mod_A.asm	/^	N: SPACE$/;"	l
N	arquivos_teste_moodle/fat_mod_B.asm	/^	N: EXTERN$/;"	l
N	testes/teste2.asm	/^N:          SPACE$/;"	l
N	testes/teste5.asm	/^N: SPACE 3$/;"	l
NEW	testes/teste6.asm	/^NEW: SPACE$/;"	l
NEW_DATA	arquivos_teste_moodle/bin.asm	/^NEW_DATA: SPACE$/;"	l
OLD	testes/teste6.asm	/^OLD: SPACE$/;"	l
OLDER	testes/teste6.asm	/^OLDER: SPACE$/;"	l
OLD_DATA	arquivos_teste_moodle/bin.asm	/^OLD_DATA: SPACE$/;"	l
ONE	arquivos_teste_moodle/fat_mod_A.asm	/^	ONE: CONST 1$/;"	l
ONE	testes/teste6.asm	/^ONE: CONST 1$/;"	l
OUTPUT	arquivos_teste_moodle/bin.asm	/^OUTPUT TMP_DATA$/;"	l
OUTPUT	arquivos_teste_moodle/triangulo.asm	/^OUTPUT	R$/;"	l
OUTPUT	constantes.hpp	18;"	d
OUTPUT	testes/teste6.asm	/^OUTPUT NEW$/;"	l
OUTPUT	testes/teste6.asm	/^OUTPUT OLD$/;"	l
Operand	montador.cpp	/^class Operand {$/;"	c	file:
Output	testes/teste1.asm	/^Output R$/;"	l
PREPROCESSA	constantes.hpp	74;"	d
PREPROCESSA_CPP	preprocessador.cpp	10;"	d	file:
PUBLIC	constantes.hpp	/^const string PUBLIC = "PUBLIC";$/;"	v
R	arquivos_teste_moodle/triangulo.asm	/^R:		SPACE$/;"	l
R	testes/teste1.asm	/^R: Space$/;"	l
RED	constantes.hpp	57;"	d
RESET	constantes.hpp	64;"	d
SECTION	arquivos_teste_moodle/bin.asm	/^SECTION DATA$/;"	l
SECTION	arquivos_teste_moodle/bin.asm	/^SECTION TEXT$/;"	l
SECTION	arquivos_teste_moodle/fat_mod_A.asm	/^SECTION DATA$/;"	l
SECTION	arquivos_teste_moodle/fat_mod_A.asm	/^SECTION TEXT$/;"	l
SECTION	arquivos_teste_moodle/fat_mod_B.asm	/^SECTION DATA$/;"	l
SECTION	arquivos_teste_moodle/fat_mod_B.asm	/^SECTION TEXT$/;"	l
SECTION	arquivos_teste_moodle/triangulo.asm	/^SECTION DATA$/;"	l
SECTION	arquivos_teste_moodle/triangulo.asm	/^SECTION TEXT$/;"	l
SECTION	testes/teste1.asm	/^SECTION DATA$/;"	l
SECTION	testes/teste1.asm	/^SECTION TEXT$/;"	l
SECTION	testes/teste2.asm	/^SECTION DATA$/;"	l
SECTION	testes/teste2.asm	/^SECTION TEXT$/;"	l
SECTION	testes/teste3.asm	/^SECTION DATAS ; se√ß√£o inv√°lida$/;"	l
SECTION	testes/teste4.asm	/^SECTION DATA$/;"	l
SECTION	testes/teste4.asm	/^SECTION TEXT$/;"	l
SECTION	testes/teste5.asm	/^SECTION DATA$/;"	l
SECTION	testes/teste5.asm	/^SECTION TEXT$/;"	l
SECTIONS_IN_WRONG_ORDER	constantes.hpp	32;"	d
SECTION_DATA	constantes.hpp	/^const string SECTION_DATA = "SECTION DATA";$/;"	v
SECTION_TEXT	constantes.hpp	/^const string SECTION_TEXT = "SECTION TEXT";$/;"	v
SEMANTIC_ERROR	constantes.hpp	/^const string SEMANTIC_ERROR = "Semantic error: ";$/;"	v
SModule	ligador.cpp	/^typedef shared_ptr<Module> SModule;$/;"	t	file:
SPACE	constantes.hpp	/^const string SPACE = "SPACE";$/;"	v
SPACE_ARGUMENT_NOT_POSITIVE	constantes.hpp	42;"	d
STOP	arquivos_teste_moodle/bin.asm	/^STOP$/;"	l
STOP	arquivos_teste_moodle/triangulo.asm	/^STOP$/;"	l
STOP	constantes.hpp	19;"	d
STOP	testes/teste6.asm	/^STOP$/;"	l
STORE	arquivos_teste_moodle/bin.asm	/^STORE  NEW_DATA$/;"	l
STORE	arquivos_teste_moodle/bin.asm	/^STORE TMP_DATA$/;"	l
STORE	arquivos_teste_moodle/triangulo.asm	/^STORE		R$/;"	l
STORE	constantes.hpp	16;"	d
STORE	testes/teste6.asm	/^STORE NEW$/;"	l
SUB	arquivos_teste_moodle/bin.asm	/^SUB TMP_DATA$/;"	l
SUB	constantes.hpp	7;"	d
SUB	testes/teste6.asm	/^SUB LIMIT$/;"	l
SYNTAX_ERROR	constantes.hpp	/^const string SYNTAX_ERROR = "Syntax error: ";$/;"	v
SimbolTable	montador.cpp	/^typedef map<string, shared_ptr<Ts>> SimbolTable;$/;"	t	file:
Store	testes/teste1.asm	/^Store R$/;"	l
TAM	testes/teste5.asm	/^TAM: equ 2$/;"	d
TMP_DATA	arquivos_teste_moodle/bin.asm	/^TMP_DATA: SPACE$/;"	l
TOKEN_ALREADY_EXISTS	constantes.hpp	31;"	d
TOKEN_TYPE_1	constantes.hpp	52;"	d
TOKEN_TYPE_2	constantes.hpp	53;"	d
TOKEN_TYPE_3	constantes.hpp	54;"	d
TOKEN_TYPE_4	constantes.hpp	55;"	d
TRIANGULO	arquivos_teste_moodle/triangulo.asm	/^TRIANGULO: EQU 1 ;isto È uma constante$/;"	d
Ts	montador.cpp	/^		Ts(int val, int outside = 0){$/;"	f	class:Ts
Ts	montador.cpp	/^class Ts{$/;"	c	file:
Var1	testes/teste5.asm	/^Var1: space$/;"	l
WHT	constantes.hpp	63;"	d
WRONG_ARG_NUM	constantes.hpp	25;"	d
WRONG_ARG_TYPE	constantes.hpp	27;"	d
WRONG_TOKEN_FORMAT	constantes.hpp	48;"	d
YEL	constantes.hpp	59;"	d
ZERO	testes/teste6.asm	/^ZERO: CONST 0$/;"	l
adiciona_label	montador.cpp	/^void adiciona_label(SimbolTable &simbol_table, string simbol, int posicao){$/;"	f
area	testes/teste4.asm	/^area: extern$/;"	l
area	testes/teste4.asm	/^area: space$/;"	l
b	testes/teste4.asm	/^b: extern$/;"	l
b	testes/teste4.asm	/^b: space$/;"	l
build_output_file	ligador.cpp	/^void build_output_file(ConfLig &c, string filename){$/;"	f
check_EQU	preprocessador.cpp	/^int check_EQU(string line, map<string, int> &equ_map){$/;"	f
check_IF	preprocessador.cpp	/^int check_IF(string line, fstream &fonte, fstream &saida, map<string, int> &equ_map){$/;"	f
check_and_open_files	ligador.cpp	/^int check_and_open_files(ConfLig &c, int argc, char *argv[]){$/;"	f
check_const	montador.cpp	/^int check_const(Config &c, Operand &a1){$/;"	f
check_error_primeira_passagem	montador.cpp	/^int check_error_primeira_passagem(Config &c){$/;"	f
check_error_segunda_passagem	montador.cpp	/^int check_error_segunda_passagem(Config &c){$/;"	f
check_operandos	montador.cpp	/^int check_operandos(Config &c, vector<string> &tokens, int line_has_label){$/;"	f
check_section_data	montador.cpp	/^int check_section_data(string &s, int &counter){$/;"	f
check_section_text	montador.cpp	/^int check_section_text(string &s, int &counter){$/;"	f
check_sections_order	montador.cpp	/^int check_sections_order(Config &c){$/;"	f
check_space	montador.cpp	/^int check_space(Config &c, Operand &a1){$/;"	f
check_valid_line	montador.cpp	/^int check_valid_line(Config &c){$/;"	f
check_validade_tokens	montador.cpp	/^int check_validade_tokens(vector<string> &tokens){$/;"	f
correct_by_factor	ligador.cpp	/^int correct_by_factor(SModule &module){$/;"	f
correction_factor	ligador.cpp	/^		int correction_factor = 0;$/;"	m	class:Module	file:
count_line	montador.cpp	/^		int count_line = 1;$/;"	m	class:Config	file:
count_pos	montador.cpp	/^		int count_pos = 0;$/;"	m	class:Config	file:
definition_table	ligador.cpp	/^		map<string, int> definition_table;$/;"	m	class:Module	file:
definition_table	montador.cpp	/^		map<string, int> definition_table;$/;"	m	class:Config	file:
div	testes/teste3.asm	/^div zero ; divis√£o por 0$/;"	l
div	testes/teste4.asm	/^div dois$/;"	l
dois	testes/teste4.asm	/^dois: const 2$/;"	l
eh_diretiva	montador.cpp	/^int eh_diretiva(string &s){$/;"	f
eh_label	helper.cpp	/^int eh_label(string &str){$/;"	f
eh_modulo	montador.cpp	/^		int eh_modulo = 0;$/;"	m	class:Config	file:
err_subtype	montador.cpp	/^		int err_subtype;$/;"	m	class:Config	file:
err_type	montador.cpp	/^		int err_type;$/;"	m	class:Config	file:
exec	main.cpp	/^void exec(int argc, char *argv[]){$/;"	f
exec_diretiva	montador.cpp	/^int exec_diretiva(string &diretiva, vector<string> &argumentos, Config &c, int count_pos, int count_line){$/;"	f
executa_instrucao	montador.cpp	/^int executa_instrucao(Config &c){$/;"	f
existe_label	montador.cpp	/^int existe_label(SimbolTable &simbol_table, string token){$/;"	f
file	ligador.cpp	/^		fstream file;$/;"	m	class:Module	file:
filtra_comentario	preprocessador.cpp	/^string filtra_comentario(string line){$/;"	f
fix_simbol_values	ligador.cpp	/^int fix_simbol_values(ConfLig &c){$/;"	f
gera_arquivo_executavel	montador.cpp	/^int gera_arquivo_executavel(Config &c, string filename){$/;"	f
gera_tgs	ligador.cpp	/^int gera_tgs(ConfLig &c){$/;"	f
get_address	montador.cpp	/^int get_address(Config &c, Operand &op){$/;"	f
get_estencao	main.cpp	/^string get_estencao(string s){$/;"	f
get_flag	main.cpp	/^int get_flag(char *flag){$/;"	f
get_instruction	montador.cpp	/^int get_instruction(map<string, int> &t, string s){$/;"	f
get_operando	montador.cpp	/^int get_operando(string str, Operand &op){$/;"	f
global_df	ligador.cpp	/^		map<string, int> global_df;$/;"	m	class:ConfLig	file:
h	testes/teste4.asm	/^h: extern$/;"	l
h	testes/teste4.asm	/^h: space$/;"	l
in_array	helper.cpp	/^bool in_array(const std::string &value, const std::vector<string> &array)$/;"	f
inicializa_arquivo	main.cpp	/^int inicializa_arquivo(char *argv[], fstream &fonte){$/;"	f
inicializa_tabela_instrucao	montador.cpp	/^void inicializa_tabela_instrucao(map<string, int> &t){$/;"	f
inicializa_tabela_tamanhos_instrucao	montador.cpp	/^void inicializa_tabela_tamanhos_instrucao(map<int,int> &t){$/;"	f
input	testes/teste1.asm	/^input B$/;"	l
input	testes/teste3.asm	/^input var$/;"	l
input	testes/teste4.asm	/^input b$/;"	l
input	testes/teste4.asm	/^input h$/;"	l
inst_size_table	montador.cpp	/^		map<int, int> inst_size_table;$/;"	m	class:Config	file:
instruction_table	montador.cpp	/^		map<string, int> instruction_table;$/;"	m	class:Config	file:
is_hex_string	helper.cpp	/^bool is_hex_string(std::string& s) {$/;"	f
is_number	helper.cpp	/^bool is_number(const std::string& s)$/;"	f
jmp	testes/teste4.asm	/^jmp modulo_b ;pulo para r√≥tulo inv√°lido$/;"	l
jmpz	testes/teste3.asm	/^jmpz som ; pulo para r√≥tulo inv√°lido, deveria ser soma$/;"	l
label	montador.cpp	/^		string label;$/;"	m	class:Operand	file:
last_label	montador.cpp	/^		string last_label;$/;"	m	class:Config	file:
liga_programa	ligador.cpp	/^int liga_programa (int argc, char*argv[])$/;"	f
line	ligador.cpp	/^		string line;$/;"	m	class:Module	file:
line	montador.cpp	/^		string line;$/;"	m	class:Config	file:
lines_with_errors	montador.cpp	/^		vector<int> lines_with_errors;$/;"	m	class:Config	file:
load	testes/teste3.asm	/^load var$/;"	l
load	testes/teste4.asm	/^load b$/;"	l
log_error	montador.cpp	/^void log_error(Config &c){$/;"	f
main	ligador.cpp	/^int main(int argc, char *argv[])$/;"	f
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
memcount	ligador.cpp	/^		int memcount = 0;$/;"	m	class:ConfLig	file:
memory	ligador.cpp	/^		map<int,int> memory;$/;"	m	class:ConfLig	file:
memory	montador.cpp	/^		map<int, CellMem> memory;$/;"	m	class:Config	file:
mod_a	testes/teste4.asm	/^mod_a: ; sem begin$/;"	l
mod_b	testes/teste4.asm	/^mod_b: begin$/;"	l
mod_b	testes/teste4.asm	/^mod_b: extern$/;"	l
mod_memory	ligador.cpp	/^		map<int,int> mod_memory;$/;"	m	class:Module	file:
modules	ligador.cpp	/^		vector<SModule> modules;$/;"	m	class:ConfLig	file:
monta_arquivo	montador.cpp	/^int monta_arquivo(fstream &fonte, string filename){$/;"	f
montagem	main.cpp	/^int montagem(fstream &fonte, fstream &saida_pre, char *argv[]){$/;"	f
mult	testes/teste4.asm	/^mult h ;instru√ß√£o errada$/;"	l
num_ends	montador.cpp	/^		int num_ends = 0;$/;"	m	class:Config	file:
num_errors	montador.cpp	/^		int num_errors = 0;$/;"	m	class:Config	file:
offset	montador.cpp	/^		int offset = 0;$/;"	m	class:Operand	file:
operacao	montador.cpp	/^		string operacao;$/;"	m	class:Config	file:
output	testes/teste4.asm	/^output area$/;"	l
outside	montador.cpp	/^		int outside;$/;"	m	class:Ts	file:
patch_memory	ligador.cpp	/^int patch_memory(ConfLig &c){$/;"	f
preprocessa_arquivo	preprocessador.cpp	/^int preprocessa_arquivo(fstream &fonte, fstream &saida_pre, char *argv[]){$/;"	f
primeira_passagem	montador.cpp	/^int primeira_passagem(fstream &fonte, Config &c){$/;"	f
proceed	preprocessador.cpp	/^void proceed(string &line, fstream &saida){$/;"	f
public	testes/teste4.asm	/^public b$/;"	l
public	testes/teste4.asm	/^public h$/;"	l
public	testes/teste4.asm	/^public mod_b$/;"	l
public	testes/teste4.asm	/^public soma$/;"	l
push_gdt	ligador.cpp	/^int push_gdt(ConfLig &c, SModule &m){$/;"	f
put_in_mem	ligador.cpp	/^int put_in_mem(ConfLig &c, SModule &m){$/;"	f
put_in_td	ligador.cpp	/^int put_in_td(SModule &m){$/;"	f
put_in_tr	ligador.cpp	/^int put_in_tr(SModule &m){$/;"	f
put_in_ut	ligador.cpp	/^int put_in_ut(SModule &m){$/;"	f
r	testes/teste3.asm	/^r: space$/;"	l
realocation_table	ligador.cpp	/^		vector<int> realocation_table;$/;"	m	class:Module	file:
reduce	helper.cpp	/^std::string reduce(const std::string& str,$/;"	f
relativo	montador.cpp	/^		int relativo = 0;$/;"	m	class:MemCell	file:
run_diretiva	montador.cpp	/^int run_diretiva(Config &c){$/;"	f
sTOP	testes/teste1.asm	/^sTOP$/;"	l
se_const	montador.cpp	/^		int se_const = 0;$/;"	m	class:Ts	file:
se_tem_label	montador.cpp	/^		int se_tem_label = 0;$/;"	m	class:Config	file:
se_tem_td	ligador.cpp	/^		int se_tem_td = 0;$/;"	m	class:Module	file:
se_tem_tu	ligador.cpp	/^		int se_tem_tu = 0;$/;"	m	class:Module	file:
section	testes/teste6.asm	/^section data$/;"	l
section	testes/teste6.asm	/^section text$/;"	l
section_data_count	montador.cpp	/^		int section_data_count = 0;$/;"	m	class:Config	file:
section_text_count	montador.cpp	/^		int section_text_count = 0;$/;"	m	class:Config	file:
segunda_passagem	montador.cpp	/^int segunda_passagem(fstream &fonte, Config &c){$/;"	f
set_definitions	montador.cpp	/^int set_definitions(Config &c){$/;"	f
set_extern	montador.cpp	/^int set_extern(string label, SimbolTable &simbol_table){$/;"	f
set_public	montador.cpp	/^int set_public(string label, Config &c){$/;"	f
simbol_table	montador.cpp	/^		SimbolTable simbol_table;$/;"	m	class:Config	file:
soma	testes/teste3.asm	/^soma: add var$/;"	l
space_size	montador.cpp	/^		int space_size = 0;$/;"	m	class:Ts	file:
split	helper.cpp	/^void split(const string &s, const char* delim, vector<string> & v){$/;"	f
stop	testes/teste3.asm	/^stop$/;"	l
stop	testes/teste4.asm	/^stop ; instru√ß√£o no local errado$/;"	l
store	testes/teste3.asm	/^store r$/;"	l
store	testes/teste4.asm	/^store area$/;"	l
to_uppercase	helper.cpp	/^void to_uppercase(string &str){$/;"	f
trim	helper.cpp	/^std::string trim(const std::string& str,$/;"	f
use_table	ligador.cpp	/^		map<string, vector<int>> use_table;$/;"	m	class:Module	file:
use_table	montador.cpp	/^		map<string, vector<int>> use_table;$/;"	m	class:Config	file:
val	montador.cpp	/^		int val;$/;"	m	class:MemCell	file:
val	montador.cpp	/^		int val;$/;"	m	class:Ts	file:
val	testes/teste5.asm	/^val: const tam$/;"	l
validate_copy	montador.cpp	/^int validate_copy(string str, Config &c){$/;"	f
validate_token	montador.cpp	/^int validate_token(string s, int option){$/;"	f
var	testes/teste3.asm	/^var: SpACe$/;"	l
var	testes/teste3.asm	/^var: const 2$/;"	l
var2	testes/teste5.asm	/^var2: space$/;"	l
var2	testes/teste5.asm	/^var2: var1: load N ; 2 rts$/;"	l
verifica_argumentos	main.cpp	/^int verifica_argumentos(int argc, char *argv[]){$/;"	f
verifica_argumentos_ligador	ligador.cpp	/^int verifica_argumentos_ligador (int argc, char *argv[]){$/;"	f
verifica_extensao	main.cpp	/^int verifica_extensao(string &s){$/;"	f
verifica_extensao_ponto_e	ligador.cpp	/^int verifica_extensao_ponto_e(string &s){$/;"	f
verifica_extensao_ponto_o	ligador.cpp	/^int verifica_extensao_ponto_o(string &s){$/;"	f
zero	testes/teste3.asm	/^zero: const 0$/;"	l
~Module	ligador.cpp	/^		~Module(){file.close();}$/;"	f	class:Module
